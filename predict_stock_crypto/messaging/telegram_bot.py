# messaging/telegram_bot.py
import telegram
from telegram.ext import ConversationHandler, Updater

# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from os import path
from sys import path as sys_path


current = path.dirname(path.realpath(__file__))
parent = path.dirname(current)
sys_path.append(parent)

from config import settings, date_time
from messaging import navigation as buttons
from database import helpful_func as base
from parse.predict_parse import get_predict_price_1_to_14_days
from parse.parse import (
    get_price_from_binance,
    get_historical_data,
    get_all_cryptos,
)
from graph import graphics_stock

watchlist_position = settings.WATCHLIST_POSITION
bot = telegram.Bot(token=settings.TOKEN)
updater = Updater(token=settings.TOKEN)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
def send_message(message: str) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    (CHATID –∑–∞–¥–∞—ë—Ç—Å—è –≤ settings.py)
    """
    bot.send_message(settings.CHAT_ID, message)


def send_photo(name_img: str, user_chat_id: int) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–≤ IMG) –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
    (CHATID –∑–∞–¥–∞—ë—Ç—Å—è –≤ settings.py)
    """
    current_img = path.join(settings.IMG_DIR, name_img)
    with open(current_img, "rb") as img:
        bot.send_photo(user_chat_id, img)


def first_starting_messaging(update, context) -> None:
    """
    –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—â–µ–Ω–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–∞–∂–∞—Ç–∏–∏ /start), –æ—Ç—Å—ã–ª–∞–µ—Ç
    –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    {
        'username': 'dmitrybudaev',
        'type': 'private',
        'id': 286003757,
        'last_name': 'Budaev',
        'first_name': 'Dmitry'
    }
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ, –æ—Ç–∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_chat_info = update.effective_chat
    # –£–∑–Ω–∞–µ–º –∏–º—è –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞—Å–ø–∞—Ä—Å–∏–≤ –∑–∞–ø—Ä–æ—Å update.message)
    user_first_name = update.message.chat.first_name
    # –ù–∞—Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    button = buttons.keyboard_main_menu
    try:
        match base.search_existing_field_in_db(
            cryptos="cryptos", symbol="symbol", BTC="BTC"
        ):
            case False:
                all_cryptos = get_all_cryptos()
                base.update_cryptos_list_in_db(all_cryptos)
                settings.logging.info(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –ë–î "
            "–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
    try:
        base.create_new_user(
            user_id=update.effective_chat.id,
            first_name=update.message.chat["first_name"],
            last_name=update.message.chat["last_name"],
            username=update.message.chat["username"],
        )
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¢–ì –±–æ—Ç–∞"
        )
    # –∏ –Ω–∞–ø–∏—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            f"{user_first_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è. "
            "\n"
            "\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è <b>–∞–Ω–∞–ª–∏–∑–∞</b> –∏ "
            "<b>–ø—Ä–æ–≥–Ω–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è</b> —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. "
            "\n"
            "\n"
            "–ù–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥–Ω–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–∏–µ, "
            f"–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å <b>–¥–æ {watchlist_position} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>."
            "\n"
            "[üí∞ <b><i>–ü—Ä–æ–≥–Ω–æ–∑</i></b>]: –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."
            "\n"
            "[üìã <b><i>–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ</i></b>]: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ "
            "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
        ),
        # –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        reply_markup=button,
        parse_mode="HTML",
    )


def see_menu_home(update, context) -> None:
    user_chat_info = update.effective_chat
    button = buttons.keyboard_main_menu
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            "\n"
            "[üí∞ <b><i>–ü—Ä–æ–≥–Ω–æ–∑</i></b>]: –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."
            "\n"
            "[üìã <b><i>–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ</i></b>]: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ "
            "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
        ),
        reply_markup=button,
        parse_mode="HTML",
    )


def see_menu_predict(update, context) -> None:
    user_chat_info = update.effective_chat
    button = buttons.keyboard_other_predict_menu
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω:"
            "\n"
            "------------"
            "\n"
            "[ü§ë <b><i>–¶–µ–Ω—ã</i></b>]: —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ "
            " –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏."
            "\n"
            "[üìà <b><i>–ì—Ä–∞—Ñ–∏–∫ —É—Ä–æ–≤–Ω–µ–π</i></b>]: –≥—Ä–∞—Ñ–∏–∫–∏ <b>Low</b> –∏ "
            "<b>High</b> —É—Ä–æ–≤–Ω–µ–π."
        ),
        reply_markup=button,
        parse_mode="HTML",
    )


def see_menu_watchlist(update, context) -> None:
    user_chat_info = update.effective_chat
    button = buttons.keyboard_other_watchlist_menu
    count = 0
    try:
        cryptos_in_watchlist = base.reading_crypto_in_watchlist(
            user_chat_info.id
        )
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–∞–≤–∞–ª—é—Ç –∏–∑ –¢–ì"
        )
        cryptos_in_watchlist = [
            (),
        ]
    message = ""
    match cryptos_in_watchlist:
        case False:
            message = "\n–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç!"
            cryptos_in_watchlist = []
        case _:
            for row in range(len(cryptos_in_watchlist)):
                count += 1
                message = (
                    message
                    + "\n"
                    + str(count)
                    + " "
                    + str(cryptos_in_watchlist[row][2])
                )
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            "–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:"
            "\n"
            "------------"
            "\n"
            f"–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å <b>–¥–æ {watchlist_position} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>"
            "\n"
            "\n"
            f"–°–µ–π—á–∞—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º {len(cryptos_in_watchlist)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:"
            f"{message}"
            "\n"
            "\n"
            "[‚úÖ <b><i>–î–æ–±–∞–≤–∏—Ç—å</i></b>]: –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ."
            "\n"
            "[‚ùå <b><i>–£–¥–∞–ª–∏—Ç—å</i></b>]: —É–¥–∞–ª–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ "
            "–Ω–∞–±–ª—é–¥–µ–Ω–∏—è."
        ),
        reply_markup=button,
        parse_mode="HTML",
    )


def see_list_crypto_from_watchlist(update, context) -> None:
    user_chat_info = update.effective_chat
    try:
        cryptos_in_watchlist = base.reading_crypto_in_watchlist(
            user_chat_info.id
        )
        match cryptos_in_watchlist:
            case False:
                cryptos_in_watchlist = []
                button = buttons.keyboard_other_watchlist_menu
                msg = (
                    "–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.\n\n[‚úÖ –î–æ–±–∞–≤–∏—Ç—å]: –¥–æ–±–∞–≤–∏—Ç—å "
                    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ."
                )
            case _:
                button = buttons.button_from_crypto_symbol_for_delete(
                    cryptos_in_watchlist
                )
                msg = (
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ "
                    "–Ω–∞–±–ª—é–¥–µ–Ω–∏—è üîΩ"
                )
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–∞–≤–∞–ª—é—Ç –≤ –¢–ì"
        )
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            "–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:" "\n" "------------" "\n" f"{msg}"
        ),
        reply_markup=button,
        parse_mode="HTML",
    )


def choise_and_delete_crypto_from_watchlist(update, context) -> None:
    user_chat_info = update.effective_chat
    message = update.message.text
    symbol = message.split()
    try:
        base.delete_crypto_from_watch_list(user_chat_info.id, symbol[1])
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–∞–≤–∞–ª—é—Ç –∏–∑ –¢–ì"
        )
    cryptos_in_watchlist = base.reading_crypto_in_watchlist(user_chat_info.id)
    match cryptos_in_watchlist:
        case False:
            cryptos_in_watchlist = []
    button = buttons.keyboard_other_watchlist_menu
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ <b>{symbol[1]}</b> —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è!"
            "\n"
            "\n"
            f"–°–µ–π—á–∞—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º <b>{len(cryptos_in_watchlist)}</b> –ø–æ–∑–∏—Ü–∏–∏."
            "\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ "
            "<b>{watchlist_position - len(cryptos_in_watchlist)}</b> –ø–æ–∑–∏—Ü–∏–π"
            "\n"
            "\n"
            "[‚úÖ <b><i>–î–æ–±–∞–≤–∏—Ç—å</i></b>]: –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ."
            "\n"
            "[‚ùå <b><i>–£–¥–∞–ª–∏—Ç—å</i></b>]: —É–¥–∞–ª–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ "
            "—Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."
        ),
        reply_markup=button,
        parse_mode="HTML",
    )


def see_menu_for_add_crypto(update, context) -> None:
    user_chat_info = update.effective_chat
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:"
            "\n"
            "------------"
            "\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏), –∫–æ—Ç–æ—Ä—É—é "
            "–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è üîΩ"
            "\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i> <b>BTC</b>"
        ),
        reply_markup=telegram.ReplyKeyboardRemove(),
        parse_mode="HTML",
    )
    return "stage_1"


def add_crypto_in_watchlist(update, context) -> None:
    user_chat_info = update.effective_chat
    crypto_symbol = ((update.message.text).replace(" ", "")).upper()
    cryptos_in_watchlist = base.reading_crypto_in_watchlist(user_chat_info.id)
    try:
        match cryptos_in_watchlist:
            case False:
                cryptos_in_watchlist = []
                is_add = base.add_new_crypto_in_db_for_watch(
                    user_chat_info.id, crypto_symbol
                )
                if is_add:
                    msg = (
                        f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ <b>{crypto_symbol}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ "
                        "—Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è!"
                    )
                else:
                    msg = (
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É (<b>{crypto_symbol}</b>)."
                        " –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏?"
                    )
                    try:
                        match base.search_existing_field_in_db(
                            cryptos="cryptos", symbol="symbol", BTC="BTC"
                        ):
                            case False:
                                all_cryptos = get_all_cryptos()
                                base.update_cryptos_list_in_db(all_cryptos)
                                settings.logging.info(
                                    "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è "
                                    "–Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                                )
                    except Exception as error:
                        settings.logging.error(
                            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ "
                            "—Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –ë–î –ø—Ä–∏ "
                            "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        )
            case _:
                if len(cryptos_in_watchlist) < watchlist_position:
                    is_add = base.add_new_crypto_in_db_for_watch(
                        user_chat_info.id, crypto_symbol
                    )
                    if is_add:
                        msg = (
                            f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ <b>{crypto_symbol}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                            " –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è!"
                        )
                    else:
                        msg = (
                            "–•–º, –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É "
                            f"(<b>{crypto_symbol}</b>)."
                            " –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏?"
                        )
                        try:
                            match base.search_existing_field_in_db(
                                cryptos="cryptos", symbol="symbol", BTC="BTC"
                            ):
                                case False:
                                    all_cryptos = get_all_cryptos()
                                    base.update_cryptos_list_in_db(all_cryptos)
                                    settings.logging.info(
                                        "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è "
                                        "–Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                                    )
                        except Exception as error:
                            settings.logging.error(
                                f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ "
                                "—Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –ë–î –ø—Ä–∏ "
                                "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            )
                else:
                    msg = (
                        "–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω.\n\n–£–¥–∞–ª–∏—Ç–µ, "
                        "—á—Ç–æ-–Ω–∏–±—É–¥—å, –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º!"
                    )
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–∞–≤–∞–ª—é—Ç –≤ –¢–ì"
        )
    button = buttons.keyboard_other_watchlist_menu
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(f"{msg}"),
        reply_markup=button,
        parse_mode="HTML",
    )
    return ConversationHandler.END


def get_price_1_to_14_days(update, context) -> None:
    button = buttons.keyboard_other_predict_menu
    user_chat_info = update.effective_chat
    cryptos_in_watchlist = base.reading_crypto_in_watchlist(user_chat_info.id)
    try:
        match cryptos_in_watchlist:
            case False:
                message = (
                    "\n–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç!"
                    f"\n–î–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ {watchlist_position} –ø–æ–∑–∏—Ü–∏–π"
                )
                context.bot.send_message(
                    chat_id=user_chat_info.id,
                    text=message,
                    reply_markup=button,
                    parse_mode="HTML",
                )
            case _:
                for count in range(len(cryptos_in_watchlist)):
                    crypto_name = base.search_existing_field_in_db(
                        db_name="cryptos",
                        column_name="symbol",
                        search_field=cryptos_in_watchlist[count][2],
                    )
                    crypros_predict_price = get_predict_price_1_to_14_days(
                        crypto_name[1]
                    )
                    crypros_today_price = get_price_from_binance(
                        symbol=cryptos_in_watchlist[count][2]
                    )
                    message = (
                        f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{crypto_name[1]}</b> –Ω–∞ "
                        "–±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏:"
                        "\n"
                        "------------"
                        "\n"
                        "<b>–î–∞—Ç–∞</b> | <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>, $"
                        "\n"
                        f"–°–µ–≥–æ–¥–Ω—è | {crypros_today_price} $"
                        "\n"
                        f"{crypros_predict_price}"
                        "\n"
                    )
                    context.bot.send_message(
                        chat_id=user_chat_info.id,
                        text=message,
                        reply_markup=button,
                        parse_mode="HTML",
                    )
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–∞–≤–∞–ª—é—Ç –≤ –¢–ì"
        )


def see_choice_graph_level(update, context) -> None:
    user_chat_info = update.effective_chat
    button = buttons.keyboard_other_level_menu
    context.bot.send_message(
        chat_id=user_chat_info.id,
        text=(
            "–ì—Ä–∞—Ñ–∏–∫–∏ —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω:"
            "\n"
            "------------"
            "\n"
            "[üî¥ <b><i>Low</i></b>]: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏"
            "\n"
            "[üü¢ <b><i>High</i></b>]: –£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ"
        ),
        reply_markup=button,
        parse_mode="HTML",
    )


def get_high_level_graph(
    update, context, name_levels="High", func_message="–í–µ—Ä—Ö–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π"
) -> None:
    user_chat_info = update.effective_chat
    button = buttons.keyboard_other_level_menu
    try:
        dict_date = date_time.set_current_to_from_date()
    except Exception as error:
        settings.logging.error(
            f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞—Ç—ã –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –¢–ì"
        )
    cryptos_in_watchlist = base.reading_crypto_in_watchlist(user_chat_info.id)
    match cryptos_in_watchlist:
        case False:
            message = (
                "\n–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç!"
                f"\n–î–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ {watchlist_position} –ø–æ–∑–∏—Ü–∏–π"
            )
            context.bot.send_message(
                chat_id=user_chat_info.id,
                text=message,
                reply_markup=button,
                parse_mode="HTML",
            )
        case _:
            try:
                for count in range(len(cryptos_in_watchlist)):
                    crypto_name = base.search_existing_field_in_db(
                        db_name="cryptos",
                        column_name="symbol",
                        search_field=cryptos_in_watchlist[count][2],
                    )
                    df = get_historical_data(
                        symbol=crypto_name[1],
                        from_date=dict_date["old-date"],
                        today_date=dict_date["today"],
                        is_crypto=True,
                        country=settings.COUNTRY,
                    )
                    img_name = graphics_stock.stock_to_graph(
                        df=df,
                        from_date=dict_date["old-date"],
                        today_date=dict_date["today"],
                        stock=crypto_name[1],
                        function=name_levels,
                    )
                    context.bot.send_message(
                        chat_id=user_chat_info.id,
                        text=(
                            f"–ì—Ä–∞—Ñ–∏–∫ {func_message} –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É "
                            f"<b>{cryptos_in_watchlist[count][2]}</b>:"
                            "\n"
                        ),
                        reply_markup=button,
                        parse_mode="HTML",
                    )
                    send_photo(img_name, user_chat_info.id)
            except Exception as error:
                settings.logging.error(
                    f"–û—à–∏–±–∫–∞ ({error}) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞—Ç—ã –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ "
                    "–≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –¢–ì"
                )


# –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
def get_low_level_graph(update, context) -> None:
    get_high_level_graph(
        update=update,
        context=context,
        name_levels="Low",
        func_message="–ù–∏–∂–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π",
    )
